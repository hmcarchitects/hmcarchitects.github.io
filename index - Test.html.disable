<!--
//The MIT License (MIT)
-->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta charset="utf-8">
    <title>Hydra - Sharing platform for Grasshopper and Dynamo users</title>
    <link rel="icon" type="image/x-icon" href="./lib/favicon.ico">
    <link rel="stylesheet" type="text/css" href="./lib/style.css">
    <script src="./lib/d3.min.js"></script>
</head>
<body>
    <header>
        <p>Inspired by <a href="http://bl.ocks.org/">bl.ocks.org</a></p>
        <p>Do you want to share your files with the world? <a href="https://github.com/HydraShare/hydra/wiki">Read here. We made it very easy for you.</a></p>
    </header>
    <h2 class="user-login" title="Click on images for more information">
        Welcome to Hydra! Click on images for more information
        <span style="float:right">
            <input type="text" id="filtering" placeholder="username, component name,&hellip;">
            <button id="filterButton" type="button">Filter!</button>
        </span>
    </h2>
    <div class="examples">
        <br clear="both">
        <div class="loading">Loading; one moment please...</div>
    </div>
    <script type="text/javascript">
        // read all the available example files
        var formatDate = d3.time.format("%B %-d, %Y"),
            parseDate = d3.time.format.iso.parse,
            page = 0,
            fetching,
            id,
            keywords = [];
        // read uri
        function parseUri() {
            var inputParameters = {
                keywords: []
            }
            // parse Uri
            var pars = window.location.search.replace("?", "").split("&")
            if (pars[0] == "") return;
            pars.forEach(function (d) {
                keyValue = d.split("=");
                inputParameters[keyValue[0].toLowerCase()].push(decodeURIComponent(keyValue[1]));
            })


            keywords = inputParameters.keywords;
        }

        parseUri();

        // update value in text box
        if (keywords.length != 0) {
            // d3 equivalent didn't work!
            document.getElementById("filtering").value = keywords.join(", ");
        }

        function getSamples() {
            var members = {};

            // here is a json object of all Hydra forks
            var forks = "https://api.github.com/repos/HydraShare/Hydra/forks";
            d3.json(forks, function (error, data) {
                // find all the forks and member names
                data.forEach(function (d) {
                    // add each member with url to their fork
                    members[d.owner.login] = d.name;
                });
                getContents(members, display);
            });
        };
        function getContents(members, display) {
            var samplesData = [];
            var basepath;
            d3.keys(members).forEach(function (member, i) {
                basepath = "https://api.github.com/repos/" + member + "/" + members[member] + "/contents";
                // get contents and collect trees and json objects inside folders
                // also add owner as the level
                d3.json(basepath, function (error, contents) {
                    // find all the forks and member names
                    contents.forEach(function (content, j) {
                        // add each member with url to their fork
                        if (content.type == "dir") {
                            // parse folder contents and create path to json file
                            var jsonFile = "https://raw.githubusercontent.com/" + member + "/" + members[member] + "/master/" + content.name + "/input.json";
                            d3.json(jsonFile, function (error, data) {
                                var sample = {
                                    "owner": member,
                                    "id": content.name,
                                    "fork": members[member],
                                    //"created_at": parseDate(data.date),
                                    "thumbnail": "https://raw.githubusercontent.com/" + member + "/" + members[member] + "/master/" + content.name + "/" + data.thumbnail,
                                    "tags": data.tags.concat(d3.keys(data.components)).join("").toLowerCase() + member.toLowerCase() + content.name.toLowerCase()
                                }
                                samplesData.push(sample);
                                // I couldn't get the call back to work and that's why this is here!
                                // It needs to be changed later!
                                display(samplesData);
                                // in case user passed a keyword in uri
                                filter(keywords);
                            });
                        }
                    });
                });
            });
        }
        getSamples();
        function display(examples) {
            fetching = false;
            if (!examples.length) {
                page = NaN;
                d3.select(".loading").remove();
                return;
            }
            /* temporary removed - will be uncommented once the versioning is connected to github
            examples.forEach(function(d) {
              d.created_at = parseDate(d.created_at);
              d.updated_at = parseDate(d.created_at);
            });
            */
            var exampleEnter = d3.select(".examples").selectAll(".example")
                .data(examples)
                .enter().insert("a", "br")
                .attr("class", "example")
                .attr("href", function (d) { return "http://hydrashare.github.io/hydra/viewer?owner=" + d.owner + "&fork=" + d.fork + "&id=" + d.id; })
                .style("background-image", function (d) { return "url(" + d.thumbnail + ")"; });
            exampleEnter.append("span")
                .attr("class", "description")
                .text(function (d) { return d.id.replace(/_/g, " "); });
            /* temporary removed - will be uncommented once the versioning is connected to github
            exampleEnter.append("span")
                .attr("class", "date")
                .text(function(d) { return formatDate(d.created_at); });
              */
            d3.select(".loading").remove();
        }
        // script to filter examples
        // Turns out that FireFox doesn't accept inline functions
        // on("click", filter(getKeywords())) won't work in FireFox
        d3.select("#filterButton")
            .on("click", function () {
                filter(getKeywords())
            });
        d3.select('#filtering').on("keypress", function () {
            var keyCode = d3.event.keyCode;
            if (keyCode == '13') filter(getKeywords());
        });
        function getKeywords() {
            return d3.select("#filtering").node().value.split(",");
        }
        function filter(keywords) {
            // visibility: hidden; position: fixed
            var exampledivs = d3.selectAll(".example");
            // turn everything on
            exampledivs.style("visibility", "visible")
                .style("position", "");
            if (keywords.length == 0 || (keywords.length == 1 & keywords[0] == "")) return; // no keyword!
            // map the values
            var isIncluded = {};
            exampledivs.data().map(function (d) {
                for (var i = 0; i < keywords.length; i++) {
                    if (d.tags.includes(keywords[i].toLowerCase())) isIncluded[d.id] = true;
                    return;
                }
                isIncluded[d.id] = false;
            });
            exampledivs.style("visibility", function (d) { return isIncluded[d.id] ? "visible" : "hidden" })
                .style("position", function (d) { return isIncluded[d.id] ? "" : "fixed" });
        }
    </script>
</body>
